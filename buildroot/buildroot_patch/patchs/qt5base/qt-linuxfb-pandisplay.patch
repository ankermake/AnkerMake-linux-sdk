diff -ru qtbase-everywhere-src-5.12.7/src/plugins/platforms/linuxfb/qlinuxfbscreen.cpp qtbase-everywhere-src-5.12.7_2/src/plugins/platforms/linuxfb/qlinuxfbscreen.cpp
--- qtbase-everywhere-src-5.12.7/src/plugins/platforms/linuxfb/qlinuxfbscreen.cpp	2020-01-24 13:54:31.000000000 +0800
+++ qtbase-everywhere-src-5.12.7_2/src/plugins/platforms/linuxfb/qlinuxfbscreen.cpp	2020-09-12 16:52:44.730775793 +0800
@@ -60,6 +60,7 @@
 #include <stdio.h>
 #include <limits.h>
 #include <signal.h>
+#include <assert.h>
 
 #include <linux/fb.h>
 
@@ -245,50 +246,16 @@
     return format;
 }
 
-static int openTtyDevice(const QString &device)
-{
-    const char *const devs[] = { "/dev/tty0", "/dev/tty", "/dev/console", 0 };
-
-    int fd = -1;
-    if (device.isEmpty()) {
-        for (const char * const *dev = devs; *dev; ++dev) {
-            fd = QT_OPEN(*dev, O_RDWR);
-            if (fd != -1)
-                break;
-        }
-    } else {
-        fd = QT_OPEN(QFile::encodeName(device).constData(), O_RDWR);
-    }
-
-    return fd;
-}
-
-static void switchToGraphicsMode(int ttyfd, bool doSwitch, int *oldMode)
-{
-    // Do not warn if the switch fails: the ioctl fails when launching from a
-    // remote console and there is nothing we can do about it.  The matching
-    // call in resetTty should at least fail then, too, so we do no harm.
-    if (ioctl(ttyfd, KDGETMODE, oldMode) == 0) {
-        if (doSwitch && *oldMode != KD_GRAPHICS)
-            ioctl(ttyfd, KDSETMODE, KD_GRAPHICS);
-    }
-}
-
-static void resetTty(int ttyfd, int oldMode)
-{
-    ioctl(ttyfd, KDSETMODE, oldMode);
-
-    QT_CLOSE(ttyfd);
-}
-
 static void blankScreen(int fd, bool on)
 {
     ioctl(fd, FBIOBLANK, on ? VESA_POWERDOWN : VESA_NO_BLANKING);
 }
 
 QLinuxFbScreen::QLinuxFbScreen(const QStringList &args)
-    : mArgs(args), mFbFd(-1), mTtyFd(-1), mBlitter(0)
+    : mArgs(args), mFbFd(-1)
 {
+    mBlitter[0] = 0;
+    mBlitter[1] = 0;
     mMmap.data = 0;
 }
 
@@ -296,25 +263,24 @@
 {
     if (mFbFd != -1) {
         if (mMmap.data)
-            munmap(mMmap.data - mMmap.offset, mMmap.size);
+            munmap(mMmap.data, mMmap.size);
         close(mFbFd);
     }
 
-    if (mTtyFd != -1)
-        resetTty(mTtyFd, mOldTtyMode);
-
-    delete mBlitter;
+    if (mBlitter[0])
+        delete mBlitter[0];
+    if (mBlitter[1])
+        delete mBlitter[1];
 }
 
 bool QLinuxFbScreen::initialize()
 {
-    QRegularExpression ttyRx(QLatin1String("tty=(.*)"));
     QRegularExpression fbRx(QLatin1String("fb=(.*)"));
     QRegularExpression mmSizeRx(QLatin1String("mmsize=(\\d+)x(\\d+)"));
     QRegularExpression sizeRx(QLatin1String("size=(\\d+)x(\\d+)"));
     QRegularExpression offsetRx(QLatin1String("offset=(\\d+)x(\\d+)"));
 
-    QString fbDevice, ttyDevice;
+    QString fbDevice;
     QSize userMmSize;
     QRect userGeometry;
     bool doSwitchToGraphicsMode = true;
@@ -330,8 +296,6 @@
             userGeometry.setSize(QSize(match.captured(1).toInt(), match.captured(2).toInt()));
         else if (arg.contains(offsetRx, &match))
             userGeometry.setTopLeft(QPoint(match.captured(1).toInt(), match.captured(2).toInt()));
-        else if (arg.contains(ttyRx, &match))
-            ttyDevice = match.captured(1);
         else if (arg.contains(fbRx, &match))
             fbDevice = match.captured(1);
     }
@@ -369,6 +333,8 @@
         return false;
     }
 
+    vinfo.yoffset = 0;
+    m_vinfo = vinfo;
     mDepth = determineDepth(vinfo);
     mBytesPerLine = finfo.line_length;
     QRect geometry = determineGeometry(vinfo, userGeometry);
@@ -378,25 +344,31 @@
 
     // mmap the framebuffer
     mMmap.size = finfo.smem_len;
-    uchar *data = (unsigned char *)mmap(0, mMmap.size, PROT_READ | PROT_WRITE, MAP_SHARED, mFbFd, 0);
-    if ((long)data == -1) {
+    mMmap.data = (unsigned char *)mmap(0, mMmap.size, PROT_READ | PROT_WRITE, MAP_SHARED, mFbFd, 0);
+    if ((long)mMmap.data == -1) {
         qErrnoWarning(errno, "Failed to mmap framebuffer");
         return false;
     }
 
-    mMmap.offset = geometry.y() * mBytesPerLine + geometry.x() * mDepth / 8;
-    mMmap.data = data + mMmap.offset;
+    int offset = geometry.y() * mBytesPerLine + geometry.x() * mDepth / 8;
+
+    int framesize = vinfo.yres * finfo.line_length;    
 
     QFbScreen::initializeCompositor();
-    mFbScreenImage = QImage(mMmap.data, geometry.width(), geometry.height(), mBytesPerLine, mFormat);
+    mMmap.yoffset[0] = 0;
+    mMmap.yoffset[1] = 0;
+    mFbScreenImage[0] = QImage(mMmap.data + offset, geometry.width(), geometry.height(), mBytesPerLine, mFormat);
+    mFbScreenImage[1] = mFbScreenImage[0];
+    m_display_count = 0;
+
+    if (finfo.smem_len / framesize >= 2) {
+        mMmap.yoffset[1] = vinfo.yres;
+        mFbScreenImage[1] = QImage(mMmap.data + offset + framesize,
+            geometry.width(), geometry.height(), mBytesPerLine, mFormat);
+    }
 
     mCursor = new QFbCursor(this);
 
-    mTtyFd = openTtyDevice(ttyDevice);
-    if (mTtyFd == -1)
-        qErrnoWarning(errno, "Failed to open tty");
-
-    switchToGraphicsMode(mTtyFd, doSwitchToGraphicsMode, &mOldTtyMode);
     blankScreen(mFbFd, false);
 
     return true;
@@ -405,16 +377,29 @@
 QRegion QLinuxFbScreen::doRedraw()
 {
     QRegion touched = QFbScreen::doRedraw();
+    int index = m_display_count % 2;
 
     if (touched.isEmpty())
         return touched;
 
-    if (!mBlitter)
-        mBlitter = new QPainter(&mFbScreenImage);
+    if (!mBlitter[index])
+        mBlitter[index] = new QPainter(&mFbScreenImage[index]);
+
+    QPainter *blitter = mBlitter[index];
+
+    blitter->setCompositionMode(QPainter::CompositionMode_Source);
+
+    // for (const QRect &rect : touched)
+    //     blitter->drawImage(rect, mScreenImage, rect);
 
-    mBlitter->setCompositionMode(QPainter::CompositionMode_Source);
-    for (const QRect &rect : touched)
-        mBlitter->drawImage(rect, mScreenImage, rect);
+    blitter->drawImage(QPointF(0, 0), mScreenImage);
+
+    m_vinfo.yoffset = mMmap.yoffset[index];
+    int ret = ioctl(mFbFd, FBIOPAN_DISPLAY, &m_vinfo);
+    if (ret)
+        fprintf(stderr, "QT: ioctl FBIOPAN_DISPLAY failed: %d\n", errno);
+
+    m_display_count++;
 
     return touched;
 }
@@ -423,12 +408,15 @@
 // In linuxfb's case it will also include the mouse cursor.
 QPixmap QLinuxFbScreen::grabWindow(WId wid, int x, int y, int width, int height) const
 {
+    int index = m_display_count % 2;
+    QImage screen_image = mFbScreenImage[index];
+
     if (!wid) {
         if (width < 0)
-            width = mFbScreenImage.width() - x;
+            width = screen_image.width() - x;
         if (height < 0)
-            height = mFbScreenImage.height() - y;
-        return QPixmap::fromImage(mFbScreenImage).copy(x, y, width, height);
+            height = screen_image.height() - y;
+        return QPixmap::fromImage(screen_image).copy(x, y, width, height);
     }
 
     QFbWindow *window = windowForId(wid);
@@ -440,7 +428,7 @@
             height = geom.height() - y;
         QRect rect(geom.topLeft() + QPoint(x, y), QSize(width, height));
         rect &= window->geometry();
-        return QPixmap::fromImage(mFbScreenImage).copy(rect);
+        return QPixmap::fromImage(screen_image).copy(rect);
     }
 
     return QPixmap();
diff -ru qtbase-everywhere-src-5.12.7/src/plugins/platforms/linuxfb/qlinuxfbscreen.h qtbase-everywhere-src-5.12.7_2/src/plugins/platforms/linuxfb/qlinuxfbscreen.h
--- qtbase-everywhere-src-5.12.7/src/plugins/platforms/linuxfb/qlinuxfbscreen.h	2020-01-24 13:54:31.000000000 +0800
+++ qtbase-everywhere-src-5.12.7_2/src/plugins/platforms/linuxfb/qlinuxfbscreen.h	2020-09-11 15:17:37.145286098 +0800
@@ -41,6 +41,7 @@
 #define QLINUXFBSCREEN_H
 
 #include <QtFbSupport/private/qfbscreen_p.h>
+#include <linux/fb.h>
 
 QT_BEGIN_NAMESPACE
 
@@ -63,18 +64,21 @@
 private:
     QStringList mArgs;
     int mFbFd;
-    int mTtyFd;
 
-    QImage mFbScreenImage;
+    QImage mFbScreenImage[2];
+    int m_display_count;
+
     int mBytesPerLine;
     int mOldTtyMode;
+    struct fb_var_screeninfo m_vinfo;
 
     struct {
         uchar *data;
-        int offset, size;
+        int size;
+        int yoffset[2];
     } mMmap;
 
-    QPainter *mBlitter;
+    QPainter *mBlitter[2];
 };
 
 QT_END_NAMESPACE
