diff --git a/libavdevice/Makefile b/libavdevice/Makefile
index e9e4d16..531c807 100644
--- a/libavdevice/Makefile
+++ b/libavdevice/Makefile
@@ -46,6 +46,7 @@ OBJS-$(CONFIG_SNDIO_INDEV)               += sndio_dec.o sndio.o
 OBJS-$(CONFIG_SNDIO_OUTDEV)              += sndio_enc.o sndio.o
 OBJS-$(CONFIG_V4L2_INDEV)                += v4l2.o v4l2-common.o timefilter.o
 OBJS-$(CONFIG_V4L2_OUTDEV)               += v4l2enc.o v4l2-common.o
+OBJS-$(CONFIG_V4L2_INDEV)                += x2000_isp_dec.o
 OBJS-$(CONFIG_VFWCAP_INDEV)              += vfwcap.o
 OBJS-$(CONFIG_XCBGRAB_INDEV)             += xcbgrab.o
 OBJS-$(CONFIG_XV_OUTDEV)                 += xv.o
diff --git a/libavdevice/alldevices.c b/libavdevice/alldevices.c
index e6e32e9..9916616 100644
--- a/libavdevice/alldevices.c
+++ b/libavdevice/alldevices.c
@@ -52,6 +52,7 @@ extern AVInputFormat  ff_sndio_demuxer;
 extern AVOutputFormat ff_sndio_muxer;
 extern AVInputFormat  ff_v4l2_demuxer;
 extern AVOutputFormat ff_v4l2_muxer;
+extern AVInputFormat ff_x2000_isp_demuxer;
 extern AVInputFormat  ff_vfwcap_demuxer;
 extern AVInputFormat  ff_xcbgrab_demuxer;
 extern AVOutputFormat ff_xv_muxer;
diff --git a/libavdevice/camera_common.h b/libavdevice/camera_common.h
new file mode 100644
index 0000000..f92c32e
--- /dev/null
+++ b/libavdevice/camera_common.h
@@ -0,0 +1,68 @@
+#ifndef _CAMERA_COMMON_H_
+#define _CAMERA_COMMON_H_
+
+#include "camera_pixel_format.h"
+
+struct sensor_dbg_register {
+    unsigned long long reg;
+    unsigned long long val;
+    unsigned int size;      /* val size, unit:byte */
+};
+
+struct camera_info {
+    char name[64];
+
+    /* 每行像素数 */
+    unsigned int width;
+
+    /* 行数 */
+    unsigned int height;
+
+    /* camera 帧率 */
+    unsigned int fps;
+
+    /* camera 帧数据格式 */
+    camera_pixel_fmt data_fmt;
+
+    /* 一行的长度,单位字节
+     * 对于 nv12,nv21, 表示y数据一行的长度
+     * 另外由此可以算出uv数据偏移 line_length*height
+     */
+    unsigned int line_length;
+
+    /* 一帧数据经过对齐之前的大小 */
+    unsigned int frame_size;
+
+    /* 帧缓冲总数 */
+    unsigned int frame_nums;
+
+    /* 帧缓冲的物理基地址 */
+    unsigned long phys_mem;
+
+    /* mmap 后的帧缓冲基地址 */
+    void *mapped_mem;
+
+    /*帧对齐大小 */
+    unsigned int frame_align_size;
+};
+
+/* 图像帧信息 */
+struct frame_info {
+    unsigned int index;             /* 帧缓存编号 */
+    unsigned int sequence;          /* 帧序列号 */
+
+    unsigned int width;             /* 帧宽 */
+    unsigned int height;            /* 帧高 */
+    unsigned int pixfmt;            /* 帧的图像格式 */
+    unsigned int size;              /* 帧所占用空间大小 */
+    void *vaddr;                    /* 帧的虚拟地址 */
+    unsigned long paddr;            /* 帧的物理地址 */
+
+    unsigned long long timestamp;   /* 帧的时间戳，单位微秒，单调时间 */
+
+    unsigned int isp_timestamp;     /* isp时间戳，在vic通过isp clk计数换算得出，单位微秒，
+                                       最大值10000秒左右（最大值和isp clk相关），大于最大值重新清零计时 */
+    unsigned int shutter_count;     /* 曝光计数 */
+};
+
+#endif /* _CAMERA_COMMON_H_ */
diff --git a/libavdevice/camera_pixel_format.h b/libavdevice/camera_pixel_format.h
new file mode 100644
index 0000000..cb54d73
--- /dev/null
+++ b/libavdevice/camera_pixel_format.h
@@ -0,0 +1,279 @@
+#ifndef _CAMERA_PIXEL_FORMAT_H_
+#define _CAMERA_PIXEL_FORMAT_H_
+
+/*
+ * 和 module_driver下头文件camera_pixel_format.h保持一致
+ */
+
+
+/*  Four-character-code (FOURCC) */
+#define camera_fourcc(a, b, c, d)\
+    ((unsigned int)(a) | ((unsigned int)(b) << 8) | ((unsigned int)(c) << 16) | ((unsigned int)(d) << 24))
+
+#define camera_fourcc_be(a, b, c, d)  (camera_fourcc(a, b, c, d) | (1 << 31))
+
+/*
+ * Camera Pixel Format (re-define from videodev2.h)
+ */
+typedef enum {
+    /* RGB formats */
+    CAMERA_PIX_FMT_RGB332     = camera_fourcc('R', 'G', 'B', '1'), /*  8  RGB-3-3-2     */
+    CAMERA_PIX_FMT_RGB444     = camera_fourcc('R', '4', '4', '4'), /* 16  xxxxrrrr ggggbbbb */
+    CAMERA_PIX_FMT_ARGB444    = camera_fourcc('A', 'R', '1', '2'), /* 16  aaaarrrr ggggbbbb */
+    CAMERA_PIX_FMT_XRGB444    = camera_fourcc('X', 'R', '1', '2'), /* 16  xxxxrrrr ggggbbbb */
+    CAMERA_PIX_FMT_RGB555     = camera_fourcc('R', 'G', 'B', 'O'), /* 16  RGB-5-5-5     */
+    CAMERA_PIX_FMT_ARGB555    = camera_fourcc('A', 'R', '1', '5'), /* 16  ARGB-1-5-5-5  */
+    CAMERA_PIX_FMT_XRGB555    = camera_fourcc('X', 'R', '1', '5'), /* 16  XRGB-1-5-5-5  */
+    CAMERA_PIX_FMT_RGB565     = camera_fourcc('R', 'G', 'B', 'P'), /* 16  RGB-5-6-5     */
+    CAMERA_PIX_FMT_RGB555X    = camera_fourcc('R', 'G', 'B', 'Q'), /* 16  RGB-5-5-5 BE  */
+    CAMERA_PIX_FMT_ARGB555X   = camera_fourcc_be('A', 'R', '1', '5'), /* 16  ARGB-5-5-5 BE */
+    CAMERA_PIX_FMT_XRGB555X   = camera_fourcc_be('X', 'R', '1', '5'), /* 16  XRGB-5-5-5 BE */
+    CAMERA_PIX_FMT_RGB565X    = camera_fourcc('R', 'G', 'B', 'R'), /* 16  RGB-5-6-5 BE  */
+    CAMERA_PIX_FMT_BGR666     = camera_fourcc('B', 'G', 'R', 'H'), /* 18  BGR-6-6-6     */
+    CAMERA_PIX_FMT_BGR24      = camera_fourcc('B', 'G', 'R', '3'), /* 24  BGR-8-8-8     */
+    CAMERA_PIX_FMT_RGB24      = camera_fourcc('R', 'G', 'B', '3'), /* 24  RGB-8-8-8     */
+    CAMERA_PIX_FMT_RBG24      = camera_fourcc('R', 'B', 'G', '3'), /* 24  RGB-8-8-8     */
+    CAMERA_PIX_FMT_GBR24      = camera_fourcc('G', 'B', 'R', '3'), /* 24  RGB-8-8-8     */
+    CAMERA_PIX_FMT_BGR32      = camera_fourcc('B', 'G', 'R', '4'), /* 32  BGR-8-8-8-8   */
+    CAMERA_PIX_FMT_ABGR32     = camera_fourcc('A', 'R', '2', '4'), /* 32  BGRA-8-8-8-8  */
+    CAMERA_PIX_FMT_XBGR32     = camera_fourcc('X', 'R', '2', '4'), /* 32  BGRX-8-8-8-8  */
+    CAMERA_PIX_FMT_RGB32      = camera_fourcc('R', 'G', 'B', '4'), /* 32  RGB-8-8-8-8   */
+    CAMERA_PIX_FMT_ARGB32     = camera_fourcc('B', 'A', '2', '4'), /* 32  ARGB-8-8-8-8  */
+    CAMERA_PIX_FMT_XRGB32     = camera_fourcc('B', 'X', '2', '4'), /* 32  XRGB-8-8-8-8  */
+
+    /* Grey formats */
+    CAMERA_PIX_FMT_GREY       = camera_fourcc('G', 'R', 'E', 'Y'), /*  8  Greyscale     */
+    CAMERA_PIX_FMT_Y4         = camera_fourcc('Y', '0', '4', ' '), /*  4  Greyscale     */
+    CAMERA_PIX_FMT_Y6         = camera_fourcc('Y', '0', '6', ' '), /*  6  Greyscale     */
+    CAMERA_PIX_FMT_Y10        = camera_fourcc('Y', '1', '0', ' '), /* 10  Greyscale     */
+    CAMERA_PIX_FMT_Y12        = camera_fourcc('Y', '1', '2', ' '), /* 12  Greyscale     */
+    CAMERA_PIX_FMT_Y16        = camera_fourcc('Y', '1', '6', ' '), /* 16  Greyscale     */
+    CAMERA_PIX_FMT_Y16_BE     = camera_fourcc_be('Y', '1', '6', ' '), /* 16  Greyscale BE  */
+
+    /* Luminance+Chrominance formats */
+    CAMERA_PIX_FMT_YVU410     = camera_fourcc('Y', 'V', 'U', '9'), /*  9  YVU 4:1:0     */
+    CAMERA_PIX_FMT_YVU420     = camera_fourcc('Y', 'V', '1', '2'), /* 12  YVU 4:2:0     */
+    CAMERA_PIX_FMT_JZ420B     = camera_fourcc('J', 'Z', '1', '2'), /* 12  YUV 4:2:0 B   */
+    CAMERA_PIX_FMT_YUYV       = camera_fourcc('Y', 'U', 'Y', 'V'), /* 16  YUV 4:2:2     */
+    CAMERA_PIX_FMT_YYUV       = camera_fourcc('Y', 'Y', 'U', 'V'), /* 16  YUV 4:2:2     */
+    CAMERA_PIX_FMT_YVYU       = camera_fourcc('Y', 'V', 'Y', 'U'), /* 16 YVU 4:2:2 */
+    CAMERA_PIX_FMT_UYVY       = camera_fourcc('U', 'Y', 'V', 'Y'), /* 16  YUV 4:2:2     */
+    CAMERA_PIX_FMT_VYUY       = camera_fourcc('V', 'Y', 'U', 'Y'), /* 16  YUV 4:2:2     */
+    CAMERA_PIX_FMT_YUV422P    = camera_fourcc('4', '2', '2', 'P'), /* 16  YVU422 planar */
+    CAMERA_PIX_FMT_YUV411P    = camera_fourcc('4', '1', '1', 'P'), /* 16  YVU411 planar */
+    CAMERA_PIX_FMT_Y41P       = camera_fourcc('Y', '4', '1', 'P'), /* 12  YUV 4:1:1     */
+    CAMERA_PIX_FMT_YUV444     = camera_fourcc('Y', '4', '4', '4'), /* 16  xxxxyyyy uuuuvvvv */
+    CAMERA_PIX_FMT_YUV555     = camera_fourcc('Y', 'U', 'V', 'O'), /* 16  YUV-5-5-5     */
+    CAMERA_PIX_FMT_YUV565     = camera_fourcc('Y', 'U', 'V', 'P'), /* 16  YUV-5-6-5     */
+    CAMERA_PIX_FMT_YUV32      = camera_fourcc('Y', 'U', 'V', '4'), /* 32  YUV-8-8-8-8   */
+    CAMERA_PIX_FMT_YUV410     = camera_fourcc('Y', 'U', 'V', '9'), /*  9  YUV 4:1:0     */
+    CAMERA_PIX_FMT_YUV420     = camera_fourcc('Y', 'U', '1', '2'), /* 12  YUV 4:2:0     */
+    CAMERA_PIX_FMT_HI240      = camera_fourcc('H', 'I', '2', '4'), /*  8  8-bit color   */
+    CAMERA_PIX_FMT_HM12       = camera_fourcc('H', 'M', '1', '2'), /*  8  YUV 4:2:0 16x16 macroblocks */
+    CAMERA_PIX_FMT_M420       = camera_fourcc('M', '4', '2', '0'), /* 12  YUV 4:2:0 2 lines y, 1 line uv interleaved */
+
+    /* two planes -- one Y, one Cr + Cb interleaved  */
+    CAMERA_PIX_FMT_NV12       = camera_fourcc('N', 'V', '1', '2'), /* 12  Y/CbCr 4:2:0  */
+    CAMERA_PIX_FMT_NV21       = camera_fourcc('N', 'V', '2', '1'), /* 12  Y/CrCb 4:2:0  */
+    CAMERA_PIX_FMT_NV16       = camera_fourcc('N', 'V', '1', '6'), /* 16  Y/CbCr 4:2:2  */
+    CAMERA_PIX_FMT_NV61       = camera_fourcc('N', 'V', '6', '1'), /* 16  Y/CrCb 4:2:2  */
+    CAMERA_PIX_FMT_NV24       = camera_fourcc('N', 'V', '2', '4'), /* 24  Y/CbCr 4:4:4  */
+    CAMERA_PIX_FMT_NV42       = camera_fourcc('N', 'V', '4', '2'), /* 24  Y/CrCb 4:4:4  */
+
+    /* Bayer formats - see http://www.siliconimaging.com/RGB%20Bayer.htm */
+    CAMERA_PIX_FMT_SBGGR8     = camera_fourcc('B', 'A', '8', '1'), /*  8  BGBG.. GRGR.. */
+    CAMERA_PIX_FMT_SGBRG8     = camera_fourcc('G', 'B', 'R', 'G'), /*  8  GBGB.. RGRG.. */
+    CAMERA_PIX_FMT_SGRBG8     = camera_fourcc('G', 'R', 'B', 'G'), /*  8  GRGR.. BGBG.. */
+    CAMERA_PIX_FMT_SRGGB8     = camera_fourcc('R', 'G', 'G', 'B'), /*  8  RGRG.. GBGB.. */
+    CAMERA_PIX_FMT_SBGGR10    = camera_fourcc('B', 'G', '1', '0'), /* 10  BGBG.. GRGR.. */
+    CAMERA_PIX_FMT_SGBRG10    = camera_fourcc('G', 'B', '1', '0'), /* 10  GBGB.. RGRG.. */
+    CAMERA_PIX_FMT_SGRBG10    = camera_fourcc('B', 'A', '1', '0'), /* 10  GRGR.. BGBG.. */
+    CAMERA_PIX_FMT_SRGGB10    = camera_fourcc('R', 'G', '1', '0'), /* 10  RGRG.. GBGB.. */
+
+    CAMERA_PIX_FMT_SBGGR12    = camera_fourcc('B', 'G', '1', '2'), /* 12  BGBG.. GRGR.. */
+    CAMERA_PIX_FMT_SGBRG12    = camera_fourcc('G', 'B', '1', '2'), /* 12  GBGB.. RGRG.. */
+    CAMERA_PIX_FMT_SGRBG12    = camera_fourcc('B', 'A', '1', '2'), /* 12  GRGR.. BGBG.. */
+    CAMERA_PIX_FMT_SRGGB12    = camera_fourcc('R', 'G', '1', '2'), /* 12  RGRG.. GBGB.. */
+
+    /* Add New Item */
+    CAMERA_PIX_FMT_SBGGR16    = camera_fourcc('B', 'Y', 'R', '2'), /* 16  BGBG.. GRGR.. */
+    CAMERA_PIX_FMT_SGBRG16    = camera_fourcc('Y', 'B', 'R', '2'), /* 16  GBGB.. RGRG.. */
+    CAMERA_PIX_FMT_SGRBG16    = camera_fourcc('Y', 'R', 'B', '2'), /* 16  GRGR.. BGBG.. */
+    CAMERA_PIX_FMT_SRGGB16    = camera_fourcc('R', 'Y', 'B', '2'), /* 16  RGRG.. GBGB.. */
+} camera_pixel_fmt;
+
+
+/*
+ * Sensor Pixel Format (re-define from media-bus-format.h)
+ */
+typedef enum {
+    SENSOR_PIXEL_FMT_FIXED                  = 0x0001,
+
+    /* RGB - next is    0x1018 */
+    SENSOR_PIXEL_FMT_RGB444_1X12            = 0x1016,
+    SENSOR_PIXEL_FMT_RGB444_2X8_PADHI_BE    = 0x1001,
+    SENSOR_PIXEL_FMT_RGB444_2X8_PADHI_LE    = 0x1002,
+    SENSOR_PIXEL_FMT_RGB555_2X8_PADHI_BE    = 0x1003,
+    SENSOR_PIXEL_FMT_RGB555_2X8_PADHI_LE    = 0x1004,
+    SENSOR_PIXEL_FMT_RGB565_1X16            = 0x1017,
+    SENSOR_PIXEL_FMT_BGR565_2X8_BE          = 0x1005,
+    SENSOR_PIXEL_FMT_BGR565_2X8_LE          = 0x1006,
+    SENSOR_PIXEL_FMT_RGB565_2X8_BE          = 0x1007,
+    SENSOR_PIXEL_FMT_RGB565_2X8_LE          = 0x1008,
+    SENSOR_PIXEL_FMT_RGB666_1X18            = 0x1009,
+    SENSOR_PIXEL_FMT_RBG888_1X24            = 0x100e,
+    SENSOR_PIXEL_FMT_RGB666_1X24_CPADHI     = 0x1015,
+    SENSOR_PIXEL_FMT_RGB666_1X7X3_SPWG      = 0x1010,
+    SENSOR_PIXEL_FMT_BGR888_1X24            = 0x1013,
+    SENSOR_PIXEL_FMT_GBR888_1X24            = 0x1014,
+    SENSOR_PIXEL_FMT_RGB888_1X24            = 0x100a,
+    SENSOR_PIXEL_FMT_RGB888_2X12_BE         = 0x100b,
+    SENSOR_PIXEL_FMT_RGB888_2X12_LE         = 0x100c,
+    SENSOR_PIXEL_FMT_RGB888_1X7X4_SPWG      = 0x1011,
+    SENSOR_PIXEL_FMT_RGB888_1X7X4_JEIDA     = 0x1012,
+    SENSOR_PIXEL_FMT_ARGB8888_1X32          = 0x100d,
+    SENSOR_PIXEL_FMT_RGB888_1X32_PADHI      = 0x100f,
+
+    /* YUV (including grey) - next is   0x2026 */
+    SENSOR_PIXEL_FMT_Y8_1X8                 = 0x2001,
+    SENSOR_PIXEL_FMT_UV8_1X8                = 0x2015,
+    SENSOR_PIXEL_FMT_UYVY8_1_5X8            = 0x2002,
+    SENSOR_PIXEL_FMT_VYUY8_1_5X8            = 0x2003,
+    SENSOR_PIXEL_FMT_YUYV8_1_5X8            = 0x2004,
+    SENSOR_PIXEL_FMT_YVYU8_1_5X8            = 0x2005,
+    SENSOR_PIXEL_FMT_UYVY8_2X8              = 0x2006,
+    SENSOR_PIXEL_FMT_VYUY8_2X8              = 0x2007,
+    SENSOR_PIXEL_FMT_YUYV8_2X8              = 0x2008,
+    SENSOR_PIXEL_FMT_YVYU8_2X8              = 0x2009,
+    SENSOR_PIXEL_FMT_Y10_1X10               = 0x200a,
+    SENSOR_PIXEL_FMT_UYVY10_2X10            = 0x2018,
+    SENSOR_PIXEL_FMT_VYUY10_2X10            = 0x2019,
+    SENSOR_PIXEL_FMT_YUYV10_2X10            = 0x200b,
+    SENSOR_PIXEL_FMT_YVYU10_2X10            = 0x200c,
+    SENSOR_PIXEL_FMT_Y12_1X12               = 0x2013,
+    SENSOR_PIXEL_FMT_UYVY12_2X12            = 0x201c,
+    SENSOR_PIXEL_FMT_VYUY12_2X12            = 0x201d,
+    SENSOR_PIXEL_FMT_YUYV12_2X12            = 0x201e,
+    SENSOR_PIXEL_FMT_YVYU12_2X12            = 0x201f,
+    SENSOR_PIXEL_FMT_UYVY8_1X16             = 0x200f,
+    SENSOR_PIXEL_FMT_VYUY8_1X16             = 0x2010,
+    SENSOR_PIXEL_FMT_YUYV8_1X16             = 0x2011,
+    SENSOR_PIXEL_FMT_YVYU8_1X16             = 0x2012,
+    SENSOR_PIXEL_FMT_YDYUYDYV8_1X16         = 0x2014,
+    SENSOR_PIXEL_FMT_UYVY10_1X20            = 0x201a,
+    SENSOR_PIXEL_FMT_VYUY10_1X20            = 0x201b,
+    SENSOR_PIXEL_FMT_YUYV10_1X20            = 0x200d,
+    SENSOR_PIXEL_FMT_YVYU10_1X20            = 0x200e,
+    SENSOR_PIXEL_FMT_VUY8_1X24              = 0x2024,
+    SENSOR_PIXEL_FMT_YUV8_1X24              = 0x2025,
+    SENSOR_PIXEL_FMT_UYVY12_1X24            = 0x2020,
+    SENSOR_PIXEL_FMT_VYUY12_1X24            = 0x2021,
+    SENSOR_PIXEL_FMT_YUYV12_1X24            = 0x2022,
+    SENSOR_PIXEL_FMT_YVYU12_1X24            = 0x2023,
+    SENSOR_PIXEL_FMT_YUV10_1X30             = 0x2016,
+    SENSOR_PIXEL_FMT_AYUV8_1X32             = 0x2017,
+
+    /* Bayer - next is  0x3019 */
+    SENSOR_PIXEL_FMT_SBGGR8_1X8             = 0x3001,
+    SENSOR_PIXEL_FMT_SGBRG8_1X8             = 0x3013,
+    SENSOR_PIXEL_FMT_SGRBG8_1X8             = 0x3002,
+    SENSOR_PIXEL_FMT_SRGGB8_1X8             = 0x3014,
+
+    SENSOR_PIXEL_FMT_SBGGR10_1X10           = 0x3007,
+    SENSOR_PIXEL_FMT_SGBRG10_1X10           = 0x300e,
+    SENSOR_PIXEL_FMT_SGRBG10_1X10           = 0x300a,
+    SENSOR_PIXEL_FMT_SRGGB10_1X10           = 0x300f,
+    SENSOR_PIXEL_FMT_SBGGR12_1X12           = 0x3008,
+    SENSOR_PIXEL_FMT_SGBRG12_1X12           = 0x3010,
+    SENSOR_PIXEL_FMT_SGRBG12_1X12           = 0x3011,
+    SENSOR_PIXEL_FMT_SRGGB12_1X12           = 0x3012,
+
+    /*
+     * 以下不常用
+     */
+    SENSOR_PIXEL_FMT_SBGGR10_ALAW8_1X8      = 0x3015,
+    SENSOR_PIXEL_FMT_SGBRG10_ALAW8_1X8      = 0x3016,
+    SENSOR_PIXEL_FMT_SGRBG10_ALAW8_1X8      = 0x3017,
+    SENSOR_PIXEL_FMT_SRGGB10_ALAW8_1X8      = 0x3018,
+    SENSOR_PIXEL_FMT_SBGGR10_DPCM8_1X8      = 0x300b,
+    SENSOR_PIXEL_FMT_SGBRG10_DPCM8_1X8      = 0x300c,
+    SENSOR_PIXEL_FMT_SGRBG10_DPCM8_1X8      = 0x3009,
+    SENSOR_PIXEL_FMT_SRGGB10_DPCM8_1X8      = 0x300d,
+    SENSOR_PIXEL_FMT_SBGGR10_2X8_PADHI_BE   = 0x3003,
+    SENSOR_PIXEL_FMT_SBGGR10_2X8_PADHI_LE   = 0x3004,
+    SENSOR_PIXEL_FMT_SBGGR10_2X8_PADLO_BE   = 0x3005,
+    SENSOR_PIXEL_FMT_SBGGR10_2X8_PADLO_LE   = 0x3006,
+
+    /*
+     * 以下为新增加配置
+     * Bayer - next is  0x3025
+     */
+    SENSOR_PIXEL_FMT_SBGGR12_ALAW8_1X8      = 0x3019,   /* 8-bit Bayer BGBG/GRGR (A-law) */
+    SENSOR_PIXEL_FMT_SGBRG12_ALAW8_1X8      = 0x301a,
+    SENSOR_PIXEL_FMT_SGRBG12_ALAW8_1X8      = 0x301b,
+    SENSOR_PIXEL_FMT_SRGGB12_ALAW8_1X8      = 0x301c,
+    SENSOR_PIXEL_FMT_SBGGR12_DPCM8_1X8      = 0x301d,
+    SENSOR_PIXEL_FMT_SGBRG12_DPCM8_1X8      = 0x301e,
+    SENSOR_PIXEL_FMT_SGRBG12_DPCM8_1X8      = 0x301f,
+    SENSOR_PIXEL_FMT_SRGGB12_DPCM8_1X8      = 0x3020,
+    SENSOR_PIXEL_FMT_SBGGR12_2X8_PADHI_BE   = 0x3021,
+    SENSOR_PIXEL_FMT_SBGGR12_2X8_PADHI_LE   = 0x3022,
+    SENSOR_PIXEL_FMT_SBGGR12_2X8_PADLO_BE   = 0x3023,
+    SENSOR_PIXEL_FMT_SBGGR12_2X8_PADLO_LE   = 0x3024,
+
+
+    /* JPEG compressed formats - next is    0x4002 */
+    SENSOR_PIXEL_FMT_JPEG_1X8               = 0x4001,
+
+    /* Vendor specific formats - next is    0x5002 */
+
+    /* S5C73M3 sensor specific interleaved UYVY and JPEG */
+    SENSOR_PIXEL_FMT_S5C_UYVY_JPEG_1X8      = 0x5001,
+
+    /* HSV - next is    0x6002 */
+    SENSOR_PIXEL_FMT_AHSV8888_1X32          = 0x6001,
+} sensor_pixel_fmt;
+
+
+#define sensor_fmt_is_8BIT(fmt)     ( (fmt == SENSOR_PIXEL_FMT_Y8_1X8)      ||  \
+                                    (fmt == SENSOR_PIXEL_FMT_SBGGR8_1X8)    ||  \
+                                    (fmt == SENSOR_PIXEL_FMT_SGBRG8_1X8)    ||  \
+                                    (fmt == SENSOR_PIXEL_FMT_SGRBG8_1X8)    ||  \
+                                    (fmt == SENSOR_PIXEL_FMT_SRGGB8_1X8) )
+
+#define sensor_fmt_is_YUV422(fmt)   ( (fmt == SENSOR_PIXEL_FMT_UYVY8_2X8)   ||  \
+                                    (fmt == SENSOR_PIXEL_FMT_VYUY8_2X8)     ||  \
+                                    (fmt == SENSOR_PIXEL_FMT_YUYV8_2X8)     ||  \
+                                    (fmt == SENSOR_PIXEL_FMT_YVYU8_2X8)     ||  \
+                                    (fmt == SENSOR_PIXEL_FMT_UYVY8_1X16)    ||  \
+                                    (fmt == SENSOR_PIXEL_FMT_VYUY8_1X16)    ||  \
+                                    (fmt == SENSOR_PIXEL_FMT_YUYV8_1X16)    ||  \
+                                    (fmt == SENSOR_PIXEL_FMT_YVYU8_1X16)    ||  \
+                                    (fmt == SENSOR_PIXEL_FMT_YDYUYDYV8_1X16) )
+
+#define camera_fmt_is_8BIT(fmt)     ( (fmt == CAMERA_PIX_FMT_GREY)    ||  \
+                                    (fmt == CAMERA_PIX_FMT_SBGGR8)    ||  \
+                                    (fmt == CAMERA_PIX_FMT_SGBRG8)    ||  \
+                                    (fmt == CAMERA_PIX_FMT_SGRBG8)    ||  \
+                                    (fmt == CAMERA_PIX_FMT_SRGGB8))
+
+#define camera_fmt_is_16BIT(fmt)    ( (fmt == CAMERA_PIX_FMT_Y16)     ||  \
+                                    (fmt == CAMERA_PIX_FMT_SBGGR16)   ||  \
+                                    (fmt == CAMERA_PIX_FMT_SGBRG16)   ||  \
+                                    (fmt == CAMERA_PIX_FMT_SGRBG16)   ||  \
+                                    (fmt == CAMERA_PIX_FMT_SRGGB16))
+
+#define camera_fmt_is_NV12(fmt)     ( (fmt == CAMERA_PIX_FMT_NV12)    ||  \
+                                    (fmt == CAMERA_PIX_FMT_NV21)      ||  \
+                                    (fmt == CAMERA_PIX_FMT_YVU420)    ||  \
+                                    (fmt == CAMERA_PIX_FMT_JZ420B) )
+
+#define camera_fmt_is_YUV422(fmt)   ( (fmt == CAMERA_PIX_FMT_YUYV)    ||  \
+                                    (fmt == CAMERA_PIX_FMT_YYUV)      ||  \
+                                    (fmt == CAMERA_PIX_FMT_YVYU)      ||  \
+                                    (fmt == CAMERA_PIX_FMT_UYVY)      ||  \
+                                    (fmt == CAMERA_PIX_FMT_VYUY)      ||  \
+                                    (fmt == CAMERA_PIX_FMT_YUV422P)   ||  \
+                                    (fmt == CAMERA_PIX_FMT_YUV411P) )
+
+#endif /* _CAMERA_PIXEL_FORMAT_H_ */
diff --git a/libavdevice/x2000_isp.c b/libavdevice/x2000_isp.c
new file mode 100644
index 0000000..7e85f2c
--- /dev/null
+++ b/libavdevice/x2000_isp.c
@@ -0,0 +1,402 @@
+#include <stdio.h>
+#include <error.h>
+#include <dlfcn.h>
+
+#include "camera_common.h"
+
+/* 裁剪 */
+struct channel_crop {
+    int enable;
+    unsigned int top;   /* 起始坐标 */
+    unsigned int left;
+    unsigned int width;
+    unsigned int height;
+};
+
+/* 缩放 */
+struct channel_scaler {
+    int enable;
+    unsigned int width;
+    unsigned int height;
+};
+
+/* 图像帧格式 */
+struct frame_image_format {
+    unsigned int width;             /* ISP MScaler 输出分宽 */
+    unsigned int height;            /* ISP MScaler 输出分高 */
+    unsigned int pixel_format;      /* ISP MScaler 输出格式 */
+    unsigned int frame_size;        /* ISP MScaler 帧大小 */
+
+    struct channel_scaler scaler;   /* ISP MScaler 缩放属性 */
+    struct channel_crop crop;       /* ISP MScaler 裁剪属性 */
+
+    int frame_nums;                 /* ISP MScaler 缓存个数 */
+};
+
+/**
+ * @brief 获得camera设备句柄
+ * @param device_path 设备节点
+ * @return 成功返回设备句柄,失败返回-1
+ */
+static int (*isp_open)(const char* device_path);
+
+/**
+ * @brief 获得输出camera信息,映射地址等
+ * @param fd camera设备句柄,由isp_open()函数获得
+ * @param info 用于存放camera的信息,不能为NULL
+ * @return 成功返回0,失败返回负数
+ */
+static int (*isp_mmap)(int fd, struct camera_info *info);
+
+/**
+ * @brief 关闭camera设备句柄
+ * @param fd camera设备句柄,由isp_open()函数获得
+ * @param info camera的信息,由isp_open()函数初始化
+ * @return 成功返回0,失败返回-1
+ */
+static int (*isp_close)(int fd, struct camera_info *info);
+
+/**
+ * @brief 使能camera设备,上电
+ * @param fd camera设备句柄,由isp_open()函数获得
+ * @return 成功返回0,失败返回负数
+ */
+static int (*isp_power_on)(int fd);
+
+/**
+ * @brief 关闭camera设备,掉电
+ * @param fd camera设备句柄,由isp_open()函数获得
+ * @return 成功返回0,失败返回负数
+ */
+static int (*isp_power_off)(int fd);
+
+/**
+ * @brief 开始camera图像录制
+ * @param fd camera设备句柄,由isp_open()函数获得
+ * @return 成功返回0,失败返回负数
+ */
+static int (*isp_stream_on)(int fd);
+
+/**
+ * @brief 结束camera图像录制
+ * @param fd camera设备句柄,由isp_open()函数获得
+ * @return 成功返回0,失败返回负数
+ */
+static int (*isp_stream_off)(int fd);
+
+/**
+ * @brief 获取一帧录制的图像数据(未获取有效数据继续等待3s)
+ * @param fd camera设备句柄,由isp_open()函数获得
+ * @return 成功返回图像缓冲区指针,失败返回NULL
+ */
+static void *(*isp_wait_frame)(int fd);
+
+/**
+ * @brief 获取一帧录制的图像数据(不等待)
+ * @param fd camera设备句柄,由isp_open()函数获得
+ * @return 成功返回图像缓冲区指针,失败返回NULL
+ */
+static void *(*isp_get_frame)(int fd);
+
+/**
+ * @brief 释放一帧图像缓冲区
+ * @param fd camera设备句柄,由isp_open()函数获得
+ * @param mem 缓冲区指针,由isp_wait_frame()函数获得
+ * @return 成功返回0,失败返回负数
+ */
+static int (*isp_put_frame)(int fd, void *mem);
+
+/**
+ * @brief 获取一帧录制的图像数据(不等待)
+ * @param fd camera设备句柄,由isp_open()函数获得
+ * @param frame 获取的帧信息指针
+ * @return 成功返回0,失败返回负数
+ */
+static int (*isp_dqbuf)(int fd, struct frame_info *frame);
+
+/**
+ * @brief 获取一帧录制的图像数据(未获取有效数据继续等待3s)
+ * @param fd camera设备句柄,由isp_open()函数获得
+ * @param frame 获取的帧信息指针
+ * @return 成功返回0,失败返回负数
+ */
+static int (*isp_dqbuf_wait)(int fd, struct frame_info *frame);
+
+/**
+ * @brief 释放一帧图像缓冲区
+ * @param fd camera设备句柄,由isp_open()函数获得
+ * @param frame 释放的帧信息指针
+ * @return 成功返回0,失败返回负数
+ */
+static int (*isp_qbuf)(int fd, struct frame_info *frame);
+
+/**
+ * @brief 获取已录制的图像数据帧数
+ * @param fd camera设备句柄,由isp_open()函数获得
+ * @return 成功返回帧数,失败返回负数
+ */
+static int (*isp_get_avaliable_frame_count)(int fd);
+
+/**
+ * @brief 丢弃已录制的图像数据帧
+ * @param fd camera设备句柄,由isp_open()函数获得
+ * @param frames 需要丢弃的帧数
+ * @return 成功返回帧数,失败返回负数
+ */
+static int (*isp_drop_frames)(int fd, unsigned int frames);
+
+/**
+ * @brief 获得输出camera信息,映射地址等
+ * @param fd camera设备句柄,由isp_open()函数获得
+ * @param info 用于存放camera的信息,不能为NULL
+ * @return 成功返回0,失败返回负数
+ */
+static int (*isp_get_info)(int fd, struct camera_info *info);
+
+/**
+ * @brief 获得输出camera未经过ISP的原始sensor信息等
+ * @param fd camera设备句柄,由isp_open()函数获得
+ * @param info 用于存放camera的信息,不能为NULL
+ * @return 成功返回0,失败返回负数
+ */
+static int (*isp_get_sensor_info)(int fd, struct camera_info *info);
+
+/**
+ * @brief 获得ISP scaler的最大尺寸
+ * @param fd camera设备句柄,由isp_open()函数获得
+ * @param width 用于存放ISP的宽
+ * @param height 用于存放ISP的高
+ * @return 成功返回0,失败返回负数
+ */
+static int (*isp_get_max_scaler_size)(int fd, int *width, int *height);
+
+/**
+ * @brief 获得ISP 行对齐大小,单位是像素
+ * @param fd camera设备句柄,由isp_open()函数获得
+ * @param align_size 用于存放ISP的行对齐大小
+ * @return 成功返回0,失败返回负数
+ */
+static int (*isp_get_line_align_size)(int fd, int *align_size);
+
+/**
+ * @brief 设置输出信息,分辨率,buffer个数等
+ * @param fd camera设备句柄,由isp_open()函数获得
+ * @param fmt 用于传递输出信息,不能为NULL
+ * @return 成功返回0,失败返回负数
+ */
+static int (*isp_set_format)(int fd, struct frame_image_format *fmt);
+
+/**
+ * @brief 获取输出信息,frame_size(未PageSize对齐)等
+ * @param fd camera设备句柄,由isp_open()函数获得
+ * @param fmt 用于存放调整后的输出的信息,不能为NULL
+ * @return 成功返回0,失败返回负数
+ */
+static int (*isp_get_format)(int fd, struct frame_image_format *fmt);
+
+/**
+ * @brief 申请帧buffer
+ * @param fd camera设备句柄,由isp_open()函数获得
+ * @param fmt 用于存放输出的信息,不能为NULL
+ * @return 成功返回0,失败返回负数
+ */
+static int (*isp_requset_buffer)(int fd, struct frame_image_format *fmt);
+
+/**
+ * @brief 释放帧buffer
+ * @param fd camera设备句柄,由isp_open()函数获得
+ * @return 成功返回0,失败返回负数
+ */
+static int (*isp_free_buffer)(int fd);
+
+/**
+ * @brief 获取sensor寄存器
+ * @param fd camera设备句柄,由isp_open()函数获得
+ * @return 成功返回0,失败返回负数
+ */
+static int (*isp_get_sensor_reg)(int fd, struct sensor_dbg_register *reg);
+
+/**
+ * @brief 设置sensor寄存器
+ * @param fd camera设备句柄,由isp_open()函数获得
+ * @return 成功返回0,失败返回负数
+ */
+static int (*isp_set_sensor_reg)(int fd, struct sensor_dbg_register *reg);
+
+
+static void * load_x2000_isp_lib(void)
+{
+    void *handle;
+    char *error;
+    const char *func_name;
+
+    handle = dlopen("libisp.so", RTLD_LAZY);
+    if (!handle) {
+        fprintf(stderr, "Could not open libisp.so\n");
+        return NULL;
+    }
+    dlerror(); /* Clear any existing error */
+
+    func_name = "isp_open";
+    isp_open = dlsym(handle, func_name);
+    error = dlerror();
+    if (error)
+        goto dl_error;
+
+    func_name = "isp_mmap";
+    isp_mmap = dlsym(handle, func_name);
+    error = dlerror();
+    if (error)
+        goto dl_error;
+
+    func_name = "isp_close";
+    isp_close = dlsym(handle, func_name);
+    error = dlerror();
+    if (error)
+        goto dl_error;
+
+    func_name = "isp_power_on";
+    isp_power_on = dlsym(handle, func_name);
+    error = dlerror();
+    if (error)
+        goto dl_error;
+
+    func_name = "isp_power_off";
+    isp_power_off = dlsym(handle, func_name);
+    error = dlerror();
+    if (error)
+        goto dl_error;
+
+    func_name = "isp_stream_on";
+    isp_stream_on = dlsym(handle, func_name);
+    error = dlerror();
+    if (error)
+        goto dl_error;
+
+    func_name = "isp_stream_off";
+    isp_stream_off = dlsym(handle, func_name);
+    error = dlerror();
+    if (error)
+        goto dl_error;
+
+    func_name = "isp_wait_frame";
+    isp_wait_frame = dlsym(handle, func_name);
+    error = dlerror();
+    if (error)
+        goto dl_error;
+
+    func_name = "isp_get_frame";
+    isp_get_frame = dlsym(handle, func_name);
+    error = dlerror();
+    if (error)
+        goto dl_error;
+
+    func_name = "isp_put_frame";
+    isp_put_frame = dlsym(handle, func_name);
+    error = dlerror();
+    if (error)
+        goto dl_error;
+
+    func_name = "isp_dqbuf";
+    isp_dqbuf = dlsym(handle, func_name);
+    error = dlerror();
+    if (error)
+        goto dl_error;
+
+    func_name = "isp_dqbuf_wait";
+    isp_dqbuf_wait = dlsym(handle, func_name);
+    error = dlerror();
+    if (error)
+        goto dl_error;
+
+    func_name = "isp_qbuf";
+    isp_qbuf = dlsym(handle, func_name);
+    error = dlerror();
+    if (error)
+        goto dl_error;
+
+    func_name = "isp_get_avaliable_frame_count";
+    isp_get_avaliable_frame_count = dlsym(handle, func_name);
+    error = dlerror();
+    if (error)
+        goto dl_error;
+
+    func_name = "isp_drop_frames";
+    isp_drop_frames = dlsym(handle, func_name);
+    error = dlerror();
+    if (error)
+        goto dl_error;
+
+    func_name = "isp_get_info";
+    isp_get_info = dlsym(handle, func_name);
+    error = dlerror();
+    if (error)
+        goto dl_error;
+
+    func_name = "isp_get_sensor_info";
+    isp_get_sensor_info = dlsym(handle, func_name);
+    error = dlerror();
+    if (error)
+        goto dl_error;
+
+    func_name = "isp_get_max_scaler_size";
+    isp_get_max_scaler_size = dlsym(handle, func_name);
+    error = dlerror();
+    if (error)
+        goto dl_error;
+
+    func_name = "isp_get_line_align_size";
+    isp_get_line_align_size = dlsym(handle, func_name);
+    error = dlerror();
+    if (error)
+        goto dl_error;
+
+    func_name = "isp_set_format";
+    isp_set_format = dlsym(handle, func_name);
+    error = dlerror();
+    if (error)
+        goto dl_error;
+
+    func_name = "isp_get_format";
+    isp_get_format = dlsym(handle, func_name);
+    error = dlerror();
+    if (error)
+        goto dl_error;
+
+    func_name = "isp_requset_buffer";
+    isp_requset_buffer = dlsym(handle, func_name);
+    error = dlerror();
+    if (error)
+        goto dl_error;
+
+    func_name = "isp_free_buffer";
+    isp_free_buffer = dlsym(handle, func_name);
+    error = dlerror();
+    if (error)
+        goto dl_error;
+
+    func_name = "isp_get_sensor_reg";
+    isp_get_sensor_reg = dlsym(handle, func_name);
+    error = dlerror();
+    if (error)
+        goto dl_error;
+
+    func_name = "isp_set_sensor_reg";
+    isp_set_sensor_reg = dlsym(handle, func_name);
+    error = dlerror();
+    if (error)
+        goto dl_error;
+
+    return handle;
+
+dl_error:
+    dlclose(handle);
+    fprintf(stderr, "libisp.so not have %s function\n", func_name);
+    return NULL;
+}
+
+static void unload_x2000_isp_lib(void *handle)
+{
+    if (handle)
+        dlclose(handle);
+}
\ No newline at end of file
diff --git a/libavdevice/x2000_isp_dec.c b/libavdevice/x2000_isp_dec.c
new file mode 100644
index 0000000..ecbb859
--- /dev/null
+++ b/libavdevice/x2000_isp_dec.c
@@ -0,0 +1,295 @@
+#include <dirent.h>
+#include <unistd.h>
+#include <unistd.h>
+
+#include "libavutil/internal.h"
+#include "libavutil/log.h"
+#include "libavutil/mem.h"
+#include "libavutil/opt.h"
+#include "libavutil/time.h"
+#include "libavutil/parseutils.h"
+#include "libavutil/pixdesc.h"
+#include "libavformat/internal.h"
+#include "avdevice.h"
+
+#include "x2000_isp.c"
+
+struct x2000_isp_data {
+    AVClass *class;
+    int fd;
+
+    int crop_enable;
+    int crop_top;
+    int crop_left;
+    int crop_width;
+    int crop_height;
+
+    int scaler_enable;
+    int scaler_width;
+    int scaler_height;
+
+    int frame_nums;
+    struct camera_info info;
+    struct frame_image_format fmt;
+
+    int time_offset;
+
+    void *handle;           ///< dlopen handle
+};
+
+static int x2000_isp_read_header(AVFormatContext *ctx)
+{
+    struct x2000_isp_data *s = ctx->priv_data;
+    AVStream *st;
+    int res = 0;
+
+    s->handle = load_x2000_isp_lib();
+    if (!s->handle) {
+        av_log(ctx, AV_LOG_ERROR, "Could not open libisp.so\n");
+        return AVERROR(ENODEV);
+    }
+
+    st = avformat_new_stream(ctx, NULL);
+    if (!st) {
+        unload_x2000_isp_lib(s->handle);
+        return AVERROR(ENOMEM);
+    }
+
+    avpriv_set_pts_info(st, 64, 1, 1000000); /* 64 bits pts in us */
+
+    s->fd = isp_open(ctx->url);
+    if (s->fd < 0) {
+        unload_x2000_isp_lib(s->handle);
+        av_log(ctx, AV_LOG_ERROR, "Could not open x2000 isp device\n");
+        return s->fd;
+    }
+
+    if (s->scaler_enable) {
+        s->fmt.scaler.enable = s->scaler_enable;
+        s->fmt.scaler.width = s->scaler_width;
+        s->fmt.scaler.height = s->scaler_height;
+        s->fmt.width = s->scaler_width;
+        s->fmt.height = s->scaler_height;
+    }
+
+    if (s->crop_enable) {
+        s->fmt.crop.enable = s->crop_enable;
+        s->fmt.crop.top = s->crop_top;
+        s->fmt.crop.left = s->crop_left;
+        s->fmt.crop.width = s->crop_width;
+        s->fmt.crop.height = s->crop_height;
+        s->fmt.width = s->crop_width;
+        s->fmt.height = s->crop_height;
+    }
+
+    if (!s->fmt.scaler.enable && !s->fmt.crop.enable) {
+        if (isp_get_sensor_info(s->fd, &s->info) == 0) {
+            s->fmt.width = s->info.width;
+            s->fmt.height = s->info.height;
+        }
+    }
+
+    s->fmt.frame_nums = s->frame_nums;
+    s->fmt.pixel_format = CAMERA_PIX_FMT_NV12;
+
+    res = isp_set_format(s->fd, &s->fmt);
+    if (res < 0) {
+        av_log(ctx, AV_LOG_ERROR, "isp set format failed\n");
+        close(s->fd);
+        unload_x2000_isp_lib(s->handle);
+        return res;
+    }
+
+    res = isp_requset_buffer(s->fd, &s->fmt);
+    if (res < 0) {
+        av_log(ctx, AV_LOG_ERROR, "isp set request buffer failed\n");
+        close(s->fd);
+        unload_x2000_isp_lib(s->handle);
+        return res;
+    }
+
+    isp_get_info(s->fd, &s->info);
+
+    res = isp_mmap(s->fd, &s->info);
+    if (res < 0) {
+        isp_free_buffer(s->fd);
+        close(s->fd);
+        unload_x2000_isp_lib(s->handle);
+        return res;
+    }
+
+    res = isp_power_on(s->fd);
+    if (res) {
+        isp_free_buffer(s->fd);
+        isp_close(s->fd, &s->info);
+        unload_x2000_isp_lib(s->handle);
+        return res;
+    }
+
+    res = isp_stream_on(s->fd);
+    if (res) {
+        isp_free_buffer(s->fd);
+        isp_close(s->fd, &s->info);
+        unload_x2000_isp_lib(s->handle);
+        return res;
+    }
+
+    isp_get_format(s->fd, &s->fmt);
+
+    st->codecpar->codec_type = AVMEDIA_TYPE_VIDEO;
+    st->codecpar->codec_id   = AV_CODEC_ID_RAWVIDEO;
+    st->codecpar->width      = s->fmt.width;
+    st->codecpar->height     = s->fmt.height;
+    st->codecpar->format     = AV_PIX_FMT_NV12;
+    st->avg_frame_rate.num       = s->info.fps;
+    st->avg_frame_rate.den       = 1;
+    st->codecpar->bit_rate   = s->fmt.frame_size * s->info.fps * 8;
+
+    return 0;
+}
+
+static int x2000_isp_read_packet(AVFormatContext *ctx, AVPacket *pkt)
+{
+    int res;
+    struct frame_info frame;
+    struct x2000_isp_data *s = ctx->priv_data;
+
+    res = isp_dqbuf_wait(s->fd, &frame);
+    if (res)
+        return AVERROR(EAGAIN);
+
+    res = av_new_packet(pkt, frame.size);
+    if (res == 0) {
+        memcpy(pkt->data, frame.vaddr, frame.size);
+        pkt->pts = av_gettime() + s->time_offset;
+        s->time_offset = 0;
+        res = frame.size;
+    }
+    isp_qbuf(s->fd, &frame);
+
+
+    return res;
+}
+
+static int x2000_isp_read_close(AVFormatContext *ctx)
+{
+    struct x2000_isp_data *s = ctx->priv_data;
+
+    isp_drop_frames(s->fd, s->info.frame_nums);
+
+    isp_stream_off(s->fd);
+
+    isp_power_off(s->fd);
+
+    isp_free_buffer(s->fd);
+
+    isp_close(s->fd, &s->info);
+
+    unload_x2000_isp_lib(s->handle);
+    return 0;
+}
+
+static int is_x2000_isp_dev(const char *name)
+{
+    if (strlen(name) != strlen("mscaler0-ch0"))
+        return 0;
+
+    if (strncmp(name, "mscaler", 7) == 0 && strncmp(name + 8, "-ch", 3) == 0)
+        return 1;
+
+    return 0;
+}
+
+static int x2000_isp_get_device_list(AVFormatContext *ctx, AVDeviceInfoList *device_list)
+{
+    DIR *dir;
+    struct dirent *entry;
+    AVDeviceInfo *device = NULL;
+    int ret = 0;
+
+    if (!device_list)
+        return AVERROR(EINVAL);
+
+    dir = opendir("/dev");
+    if (!dir) {
+        ret = AVERROR(errno);
+        av_log(ctx, AV_LOG_ERROR, "Couldn't open the directory: %s\n", av_err2str(ret));
+        return ret;
+    }
+    while ((entry = readdir(dir))) {
+        char device_name[256];
+
+        if (!is_x2000_isp_dev(entry->d_name))
+            continue;
+
+        device = av_mallocz(sizeof(AVDeviceInfo));
+        if (!device) {
+            ret = AVERROR(ENOMEM);
+            goto fail;
+        }
+
+        snprintf(device_name, sizeof(device_name), "/dev/%s", entry->d_name);
+        device->device_name = av_strdup(device_name);
+        device->device_description = av_strdup(entry->d_name);
+        if (!device->device_name || !device->device_description) {
+            ret = AVERROR(ENOMEM);
+            goto fail;
+        }
+
+        if ((ret = av_dynarray_add_nofree(&device_list->devices, &device_list->nb_devices, device)) < 0)
+            goto fail;
+
+        continue;
+
+      fail:
+        if (device) {
+            av_freep(&device->device_name);
+            av_freep(&device->device_description);
+            av_freep(&device);
+        }
+        break;
+    }
+    closedir(dir);
+    return ret;
+}
+
+#define OFFSET(x) offsetof(struct x2000_isp_data, x)
+#define DEC AV_OPT_FLAG_DECODING_PARAM
+
+static const AVOption options[] = {
+    { "crop_enable",      "enable crop function",               OFFSET(crop_enable),      AV_OPT_TYPE_INT,    {.i64 = 0 },  0, 1, DEC },
+    { "crop_top",      "crop top",               OFFSET(crop_top),      AV_OPT_TYPE_INT,    {.i64 = 0 },  0, INT_MAX, DEC },
+    { "crop_left",      "crop left",               OFFSET(crop_left),      AV_OPT_TYPE_INT,    {.i64 = 0 },  0, INT_MAX, DEC },
+    { "crop_width",      "crop width",               OFFSET(crop_width),      AV_OPT_TYPE_INT,    {.i64 = 0 },  0, INT_MAX, DEC },
+    { "crop_height",      "crop height",               OFFSET(crop_height),      AV_OPT_TYPE_INT,    {.i64 = 0 },  0, INT_MAX, DEC },
+
+    { "scaler_enable",      "enable scaler function",               OFFSET(scaler_enable),      AV_OPT_TYPE_INT,    {.i64 = 0 },  0, 1, DEC },
+    { "scaler_width",      "scaler width",               OFFSET(scaler_width),      AV_OPT_TYPE_INT,    {.i64 = 0 },  0, INT_MAX, DEC },
+    { "scaler_height",      "scaler height",               OFFSET(scaler_height),      AV_OPT_TYPE_INT,    {.i64 = 0 },  0, INT_MAX, DEC },
+
+    { "frame_nums",      "set frame nums",               OFFSET(frame_nums),      AV_OPT_TYPE_INT,    {.i64 = 2 },  1, INT_MAX, DEC },
+
+    { "time_offset",      "first pts time offset [unit:us]",   OFFSET(time_offset),      AV_OPT_TYPE_INT,    {.i64 = 0 },  INT_MIN, INT_MAX, DEC },
+
+    { NULL },
+};
+
+static const AVClass x2000_isp_class = {
+    .class_name = "x2000 isp",
+    .item_name  = av_default_item_name,
+    .option     = options,
+    .version    = LIBAVUTIL_VERSION_INT,
+    .category   = AV_CLASS_CATEGORY_DEVICE_VIDEO_INPUT,
+};
+
+AVInputFormat ff_x2000_isp_demuxer = {
+    .name           = "x2000_isp",
+    .long_name      = NULL_IF_CONFIG_SMALL("x2000 isp"),
+    .priv_data_size = sizeof(struct x2000_isp_data),
+    .read_header    = x2000_isp_read_header,
+    .read_packet    = x2000_isp_read_packet,
+    .read_close     = x2000_isp_read_close,
+    .get_device_list = x2000_isp_get_device_list,
+    .flags          = AVFMT_NOFILE,
+    .priv_class     = &x2000_isp_class,
+};
